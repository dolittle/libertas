{"version":3,"file":"Node.js","sourceRoot":"","sources":["Node.ts"],"names":[],"mappings":";AAAA,+CAA+C;AAC/C,qGAAqG;;;AAIrG,MAAsB,IAAI;IAGtB,YAAsB,GAAQ;QAC1B,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;IACnB,CAAC;IAEM,UAAU,CAAC,MAAsB;QACpC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,UAAU,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;IAC5C,CAAC;IAED,MAAM,CAAC,YAAY,CAAC,GAAQ,EAAE,IAAY,EAAE,IAAU;QAClD,GAAG,CAAC,KAAK,CAAC,YAAY,CAClB,IAAI,EACH,IAAY,CAAC,SAAS,CAAC,WAAkB,EAC1C,IAAI,CACP,CAAC;IACN,CAAC;CACJ;AAlBD,oBAkBC","sourcesContent":["// Copyright (c) Dolittle. All rights reserved.\n// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n\nimport { Node as NRNode, NodeProperties, Red } from 'node-red';\n\nexport abstract class Node {\n    red: Red;\n\n    protected constructor(RED: Red) {\n        this.red = RED;\n    }\n\n    public createNode(config: NodeProperties): void {\n        this.red.nodes.createNode(this, config);\n    }\n\n    static registerType(RED: Red, type: string, opts?: any) {\n        RED.nodes.registerType(\n            type,\n            (this as any).prototype.constructor as any,\n            opts\n        );\n    }\n}\n\nexport interface Node extends NRNode {\n}\n"]}